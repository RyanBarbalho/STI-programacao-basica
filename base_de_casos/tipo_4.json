[
    {
      "id": "T4_PROB_001",
      "tipo_problema": 4,
      "nivel_dificuldade": "intermediario",
      "conceito_principal": "Laço 'for' com contador",
      "conceitos_secundarios": ["for", "contador", "scanf"],
      "enunciado": "Escreva um programa em C que leia um número inteiro positivo 'N' e, em seguida, imprima todos os números de 1 até N em sequência, um por linha.",
      "casos_de_teste": [
        {
          "entrada": "5\n",
          "saida_esperada": "1\n2\n3\n4\n5\n"
        },
        {
          "entrada": "3\n",
          "saida_esperada": "1\n2\n3\n"
        }
      ],
      "solucao": "#include <stdio.h>\n\nint main() {\n    int n, i;\n    printf(\"Digite um numero N: \");\n    scanf(\"%d\", &n);\n    for (i = 1; i <= n; i++) {\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}",
      "restricoes": ["N será um número inteiro e positivo."],
      "dicas": [
        "O laço 'for' é ideal quando você sabe de antemão quantas vezes quer repetir uma ação.",
        "A estrutura do 'for' é: for (inicialização; condição; incremento).",
        "Você precisará de uma variável de controle (geralmente 'i') que começa em 1, continua enquanto for menor ou igual a N, e incrementa 1 a cada passo (i++)."
      ]
    },
    {
      "id": "T4_PROB_002",
      "tipo_problema": 4,
      "nivel_dificuldade": "intermediario",
      "conceito_principal": "Laço 'for' com acumulador",
      "conceitos_secundarios": ["for", "acumulador", "soma"],
      "enunciado": "Crie um programa que calcule a soma dos 'N' primeiros números inteiros positivos. O programa deve ler o valor de 'N' do usuário e, em seguida, exibir o resultado da soma (1 + 2 + 3 + ... + N).",
      "casos_de_teste": [
        {
          "entrada": "5\n",
          "saida_esperada": "A soma dos 5 primeiros numeros e: 15\n"
        },
        {
          "entrada": "10\n",
          "saida_esperada": "A soma dos 10 primeiros numeros e: 55\n"
        }
      ],
      "solucao": "#include <stdio.h>\n\nint main() {\n    int n, i, soma = 0;\n    printf(\"Digite um numero N: \");\n    scanf(\"%d\", &n);\n    for (i = 1; i <= n; i++) {\n        soma = soma + i; // ou soma += i;\n    }\n    printf(\"A soma dos %d primeiros numeros e: %d\\n\", n, soma);\n    return 0;\n}",
      "restricoes": [],
      "dicas": [
        "Você precisará de uma variável para guardar a soma, que deve ser inicializada com 0 ANTES do laço.",
        "Dentro do laço 'for', a cada iteração, adicione o valor do seu contador (a variável 'i') à variável da soma.",
        "A expressão 'soma = soma + i' pode ser abreviada para 'soma += i'."
      ]
    },
    {
      "id": "T4_PROB_003",
      "tipo_problema": 4,
      "nivel_dificuldade": "intermediario",
      "conceito_principal": "Laço 'while' com sentinela",
      "conceitos_secundarios": ["while", "condicao de parada", "acumulador"],
      "enunciado": "Faça um programa que leia vários números inteiros e calcule a soma deles. O programa deve parar a leitura quando o usuário digitar o número 0, que é o valor sentinela (não deve ser incluído na soma).",
      "casos_de_teste": [
        {
          "entrada": "10\n20\n5\n0\n",
          "saida_esperada": "Soma total: 35\n"
        },
        {
          "entrada": "5\n-2\n10\n-1\n0\n",
          "saida_esperada": "Soma total: 12\n"
        }
      ],
      "solucao": "#include <stdio.h>\n\nint main() {\n    int numero, soma = 0;\n    printf(\"Digite numeros para somar (digite 0 para parar):\\n\");\n    scanf(\"%d\", &numero);\n    while (numero != 0) {\n        soma += numero;\n        scanf(\"%d\", &numero);\n    }\n    printf(\"Soma total: %d\\n\", soma);\n    return 0;\n}",
      "restricoes": [],
      "dicas": [
        "O laço 'while' é ideal quando não se sabe quantas vezes o laço vai rodar, e a repetição depende de uma condição.",
        "A condição do 'while' é verificada ANTES de cada execução. Se for falsa, o laço nem começa.",
        "Você precisa ler o primeiro número antes do laço e depois ler o próximo número como a última instrução dentro do laço.",
        "A condição de parada é quando o número lido for igual a 0. Portanto, o laço deve continuar ENQUANTO o número for DIFERENTE de 0."
      ]
    },
    {
      "id": "T4_PROB_004",
      "tipo_problema": 4,
      "nivel_dificuldade": "intermediario",
      "conceito_principal": "Validação de entrada com 'do-while'",
      "conceitos_secundarios": ["do-while", "operadores logicos ||", "validacao"],
      "enunciado": "Desenvolva um programa que peça ao usuário para digitar uma nota entre 0 e 10. O programa deve continuar pedindo a nota enquanto o usuário digitar um valor inválido (menor que 0 ou maior que 10). Ao final, deve imprimir a nota válida.",
      "casos_de_teste": [
        {
          "entrada": "15\n-2\n8\n",
          "saida_esperada": "Valor invalido! Digite novamente: Valor invalido! Digite novamente: Nota valida: 8.00\n"
        },
        {
          "entrada": "9.5\n",
          "saida_esperada": "Nota valida: 9.50\n"
        }
      ],
      "solucao": "#include <stdio.h>\n\nint main() {\n    float nota;\n    do {\n        printf(\"Digite uma nota entre 0 e 10: \");\n        scanf(\"%f\", &nota);\n        if (nota < 0 || nota > 10) {\n            printf(\"Valor invalido! Digite novamente: \");\n        }\n    } while (nota < 0 || nota > 10);\n\n    printf(\"Nota valida: %.2f\\n\", nota);\n    return 0;\n}",
      "restricoes": [],
      "dicas": [
        "O laço 'do-while' garante que o bloco de código execute PELO MENOS UMA VEZ, pois a condição é testada no final.",
        "Isso é perfeito para validação de entrada, pois você precisa primeiro LER o valor para depois TESTÁ-LO.",
        "A condição para continuar o laço (o `while`) é que a nota seja inválida: `nota < 0 OU nota > 10`.",
        "O operador lógico 'OU' em C é '||'."
      ]
    },
      {
      "id": "T4_PROB_005",
      "tipo_problema": 4,
      "nivel_dificuldade": "intermediario",
      "conceito_principal": "Laços Aninhados (Tabuada)",
      "conceitos_secundarios": ["for aninhado"],
      "enunciado": "Crie um programa que imprima a tabuada de multiplicação completa do 1 ao 10.",
      "casos_de_teste": [
        {
          "entrada": null,
          "saida_esperada": "Tabuada do 1:\n1 x 1 = 1\n1 x 2 = 2\n...\n1 x 10 = 10\n----------\nTabuada do 2:\n2 x 1 = 2\n...\n2 x 10 = 20\n----------\n...\nTabuada do 10:\n10 x 1 = 10\n...\n10 x 10 = 100\n----------\n"
        }
      ],
      "solucao": "#include <stdio.h>\n\nint main() {\n    int i, j;\n    for (i = 1; i <= 10; i++) {\n        printf(\"Tabuada do %d:\\n\", i);\n        for (j = 1; j <= 10; j++) {\n            printf(\"%d x %d = %d\\n\", i, j, i * j);\n        }\n        printf(\"----------\\n\");\n    }\n    return 0;\n}",
      "restricoes": ["O programa não deve pedir nenhuma entrada do usuário."],
      "dicas": [
        "Você precisará de um laço 'for' dentro de outro laço 'for'. Isso é chamado de laço aninhado.",
        "O laço externo pode controlar o número da tabuada (de 1 a 10).",
        "O laço interno pode controlar o multiplicador (também de 1 a 10).",
        "Para cada iteração do laço externo, o laço interno executará seu ciclo completo."
      ]
    }
  ]