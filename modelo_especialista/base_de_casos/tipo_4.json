[
  {
    "id": "T4_PROB_001",
    "tipo_problema": 4,
    "nivel_dificuldade": "intermediario",
    "conceito_principal": "Laço 'for' com contador",
    "conceitos_secundarios": [
      "for",
      "contador",
      "scanf"
    ],
    "enunciado": "Escreva um programa em C que leia um número inteiro positivo 'N' e, em seguida, imprima todos os números de 1 até N em sequência, um por linha.",
    "casos_de_teste": [
      {
        "entrada": "5\n",
        "saida_esperada": "1\n2\n3\n4\n5\n"
      },
      {
        "entrada": "3\n",
        "saida_esperada": "1\n2\n3\n"
      }
    ],
    "solucao": "#include <stdio.h>\n\nint main() {\n    int n, i;\n    printf(\"Digite um numero N: \");\n    scanf(\"%d\", &n);\n    for (i = 1; i <= n; i++) {\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}",
    "restricoes": [
      "N será um número inteiro e positivo."
    ],
    "dicas": [
      "O laço 'for' é ideal quando você sabe de antemão quantas vezes quer repetir uma ação.",
      "A estrutura do 'for' é: for (inicialização; condição; incremento).",
      "Você precisará de uma variável de controle (geralmente 'i') que começa em 1, continua enquanto for menor ou igual a N, e incrementa 1 a cada passo (i++)."
    ]
  },
  {
    "id": "T4_PROB_002",
    "tipo_problema": 4,
    "nivel_dificuldade": "intermediario",
    "conceito_principal": "Laço 'for' com acumulador",
    "conceitos_secundarios": [
      "for",
      "acumulador",
      "soma"
    ],
    "enunciado": "Crie um programa que calcule a soma dos 'N' primeiros números inteiros positivos. O programa deve ler o valor de 'N' do usuário e, em seguida, exibir o resultado da soma (1 + 2 + 3 + ... + N).",
    "casos_de_teste": [
      {
        "entrada": "5\n",
        "saida_esperada": "A soma dos 5 primeiros numeros e: 15\n"
      },
      {
        "entrada": "10\n",
        "saida_esperada": "A soma dos 10 primeiros numeros e: 55\n"
      }
    ],
    "solucao": "#include <stdio.h>\n\nint main() {\n    int n, i, soma = 0;\n    printf(\"Digite um numero N: \");\n    scanf(\"%d\", &n);\n    for (i = 1; i <= n; i++) {\n        soma = soma + i; // ou soma += i;\n    }\n    printf(\"A soma dos %d primeiros numeros e: %d\\n\", n, soma);\n    return 0;\n}",
    "restricoes": [],
    "dicas": [
      "Você precisará de uma variável para guardar a soma, que deve ser inicializada com 0 ANTES do laço.",
      "Dentro do laço 'for', a cada iteração, adicione o valor do seu contador (a variável 'i') à variável da soma.",
      "A expressão 'soma = soma + i' pode ser abreviada para 'soma += i'."
    ]
  },
  {
    "id": "T4_PROB_003",
    "tipo_problema": 4,
    "nivel_dificuldade": "intermediario",
    "conceito_principal": "Laço 'while' com sentinela",
    "conceitos_secundarios": [
      "while",
      "condicao de parada",
      "acumulador"
    ],
    "enunciado": "Faça um programa que leia vários números inteiros e calcule a soma deles. O programa deve parar a leitura quando o usuário digitar o número 0, que é o valor sentinela (não deve ser incluído na soma).",
    "casos_de_teste": [
      {
        "entrada": "10\n20\n5\n0\n",
        "saida_esperada": "Soma total: 35\n"
      },
      {
        "entrada": "5\n-2\n10\n-1\n0\n",
        "saida_esperada": "Soma total: 12\n"
      }
    ],
    "solucao": "#include <stdio.h>\n\nint main() {\n    int numero, soma = 0;\n    printf(\"Digite numeros para somar (digite 0 para parar):\\n\");\n    scanf(\"%d\", &numero);\n    while (numero != 0) {\n        soma += numero;\n        scanf(\"%d\", &numero);\n    }\n    printf(\"Soma total: %d\\n\", soma);\n    return 0;\n}",
    "restricoes": [],
    "dicas": [
      "O laço 'while' é ideal quando não se sabe quantas vezes o laço vai rodar, e a repetição depende de uma condição.",
      "A condição do 'while' é verificada ANTES de cada execução. Se for falsa, o laço nem começa.",
      "Você precisa ler o primeiro número antes do laço e depois ler o próximo número como a última instrução dentro do laço.",
      "A condição de parada é quando o número lido for igual a 0. Portanto, o laço deve continuar ENQUANTO o número for DIFERENTE de 0."
    ]
  },
  {
    "id": "T4_PROB_004",
    "tipo_problema": 4,
    "nivel_dificuldade": "intermediario",
    "conceito_principal": "Validação de entrada com 'do-while'",
    "conceitos_secundarios": [
      "do-while",
      "operadores logicos ||",
      "validacao"
    ],
    "enunciado": "Desenvolva um programa que peça ao usuário para digitar uma nota entre 0 e 10. O programa deve continuar pedindo a nota enquanto o usuário digitar um valor inválido (menor que 0 ou maior que 10). Ao final, deve imprimir a nota válida.",
    "casos_de_teste": [
      {
        "entrada": "15\n-2\n8\n",
        "saida_esperada": "Valor invalido! Valor invalido! Nota valida: 8.00"
      },
      {
        "entrada": "9.5\n",
        "saida_esperada": "Nota valida: 9.50\n"
      }
    ],
    "solucao": "#include <stdio.h>\n\nint main() {\n    float nota;\n    do {\n        printf(\"Digite uma nota entre 0 e 10: \");\n        scanf(\"%f\", &nota);\n        if (nota < 0 || nota > 10) {\n            printf(\"Valor invalido! Digite novamente: \");\n        }\n    } while (nota < 0 || nota > 10);\n\n    printf(\"Nota valida: %.2f\\n\", nota);\n    return 0;\n}",
    "restricoes": [],
    "dicas": [
      "O laço 'do-while' garante que o bloco de código execute PELO MENOS UMA VEZ, pois a condição é testada no final.",
      "Isso é perfeito para validação de entrada, pois você precisa primeiro LER o valor para depois TESTÁ-LO.",
      "A condição para continuar o laço (o `while`) é que a nota seja inválida: `nota < 0 OU nota > 10`.",
      "O operador lógico 'OU' em C é '||'."
    ]
  },
  {
    "id": "T4_PROB_005",
    "tipo_problema": 4,
    "nivel_dificuldade": "intermediario",
    "conceito_principal": "Laços Aninhados (Tabuada)",
    "conceitos_secundarios": [
      "for aninhado"
    ],
    "enunciado": "Crie um programa que imprima a tabuada de multiplicação completa do 1 ao 10.",
    "casos_de_teste": [
      {
        "entrada": null,
        "saida_esperada": "Tabuada do 1:\n1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n1 x 10 = 10\n----------\nTabuada do 2:\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n2 x 10 = 20\n----------\nTabuada do 3:\n3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15\n3 x 6 = 18\n3 x 7 = 21\n3 x 8 = 24\n3 x 9 = 27\n3 x 10 = 30\n----------\nTabuada do 4:\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n4 x 10 = 40\n----------\nTabuada do 5:\n5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50\n----------\nTabuada do 6:\n6 x 1 = 6\n6 x 2 = 12\n6 x 3 = 18\n6 x 4 = 24\n6 x 5 = 30\n6 x 6 = 36\n6 x 7 = 42\n6 x 8 = 48\n6 x 9 = 54\n6 x 10 = 60\n----------\nTabuada do 7:\n7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n7 x 10 = 70\n----------\nTabuada do 8:\n8 x 1 = 8\n8 x 2 = 16\n8 x 3 = 24\n8 x 4 = 32\n8 x 5 = 40\n8 x 6 = 48\n8 x 7 = 56\n8 x 8 = 64\n8 x 9 = 72\n8 x 10 = 80\n----------\nTabuada do 9:\n9 x 1 = 9\n9 x 2 = 18\n9 x 3 = 27\n9 x 4 = 36\n9 x 5 = 45\n9 x 6 = 54\n9 x 7 = 63\n9 x 8 = 72\n9 x 9 = 81\n9 x 10 = 90\n----------\nTabuada do 10:\n10 x 1 = 10\n10 x 2 = 20\n10 x 3 = 30\n10 x 4 = 40\n10 x 5 = 50\n10 x 6 = 60\n10 x 7 = 70\n10 x 8 = 80\n10 x 9 = 90\n10 x 10 = 100\n----------"
      }
    ],
    "solucao": "#include <stdio.h>\n\nint main() {\n    int i, j;\n    for (i = 1; i <= 10; i++) {\n        printf(\"Tabuada do %d:\\n\", i);\n        for (j = 1; j <= 10; j++) {\n            printf(\"%d x %d = %d\\n\", i, j, i * j);\n        }\n        printf(\"----------\\n\");\n    }\n    return 0;\n}",
    "restricoes": [
      "O programa não deve pedir nenhuma entrada do usuário."
    ],
    "dicas": [
      "Você precisará de um laço 'for' dentro de outro laço 'for'. Isso é chamado de laço aninhado.",
      "O laço externo pode controlar o número da tabuada (de 1 a 10).",
      "O laço interno pode controlar o multiplicador (também de 1 a 10).",
      "Para cada iteração do laço externo, o laço interno executará seu ciclo completo."
    ]
  }
]